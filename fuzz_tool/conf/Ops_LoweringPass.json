{
    "affine": {
        "OPS": [
            [
                "affine.apply",
                "affine.dmastart",
                "affine.dmawait",
                "affine.load",
                "affine.min",
                "affine.max",
                "affine.parallel",
                "affine.prefetch",
                "affine.store",
                "affine.for",
                "affine.if",
                "affine.yield",
                "affine.vectorload",
                "affine.vectorstore"
            ],
            [
                "affine.vectorstore",
                "affine.vectorload"
            ],
            [
                "affine.for"
            ]
        ],
        "PASS": [
            "-lower-affine",
            "-affine-super-vectorize=\"virtual-vector-size=128 test-fastest-varying=0 vectorize-reductions=true\"",
            "-pass-pipeline=\"builtin.module(func.func(convert-affine-for-to-gpu{gpu-block-dims=1 gpu-thread-dims=0}))\""
        ]
    },
    "amdgpu": {
        "OPS": [
            [
                "amdgpu.ldsbarrier",
                "rocdl.raw.buffer.load",
                "rocdl.raw.buffer.store",
                "rocdl.raw.buffer.atomic.fadd"
            ]
        ],
        "PASS": [
            "-convert-amdgpu-to-rocdl=chipset=gfx908"
        ]
    },
    "arith": {
        "OPS": [
            [
                "arith.constant",
                "arith.addi",
                "arith.subi",
                "arith.arith.muli",
                "arith.divui",
                "arith.divsi",
                "arith.remui",
                "arith.remsi",
                "arith.andi",
                "arith.ori",
                "arith.xori",
                "arith.shli",
                "arith.shrui",
                "arith.shrsi",
                "arith.negf",
                "arith.addf",
                "arith.subf",
                "arith.mulf",
                "arith.divf",
                "arith.remf",
                "arith.extui",
                "arith.extsi",
                "arith.extf",
                "arith.trunci",
                "arith.truncf",
                "arith.uitofp",
                "arith.sitofp",
                "arith.fptoui",
                "arith.fptosi",
                "arith.indexcast",
                "arith.bitcast",
                "arith.cmpi",
                "arith.cmpf",
                "arith.select"
            ],
            [
                "arith.constantcomposite",
                "arith.constantscalar",
                "arith.addi",
                "arith.subi",
                "arith.muli",
                "arith.divui",
                "arith.divsi",
                "arith.remui",
                "arith.remsiopgl",
                "arith.remsiopcl",
                "arith.andi",
                "arith.ori",
                "arith.xorioplogical",
                "arith.xoriopboolean",
                "arith.shli",
                "arith.shrui",
                "arith.shrsi",
                "arith.negf",
                "arith.addf",
                "arith.subf",
                "arith.mulf",
                "arith.divf",
                "arith.remf",
                "arith.extui",
                "arith.extuii1",
                "arith.extsi",
                "arith.extf",
                "arith.trunci",
                "arith.truncf",
                "arith.uitofp",
                "arith.sitofp",
                "arith.fptosi",
                "arith.indexcast",
                "arith.bitcast",
                "arith.cmpi",
                "arith.cmpf",
                "arith.select",
                "arith.maxf",
                "arith.maxsi",
                "arith.maxui",
                "arith.minf",
                "arith.minsi",
                "arith.minui"
            ]
        ],
        "PASS": [
            "-convert-arith-to-llvm",
            ""
        ]
    },
    "armneon": {
        "OPS": [
            [
                "armneon.2d.sdot"
            ]
        ],
        "PASS": [
            "-pass-pipeline=\"builtin.module(func.func(arm-neon-2d-to-intr))\""
        ]
    },
    "async": {
        "OPS": [
            [
                "async.execute",
                "async.await",
                "async.yield",
                "async.runtime.setavailable",
                "async.runtime.seterroro",
                "async.runtime.iserrorg",
                "async.runtime.await",
                "async.runtime.awaitandresumeg",
                "async.runtime.resume",
                "async.runtime.addtogroup",
                "async.runtime.numworkerthreads",
                "async.runtime.addref",
                "async.runtime.dropref",
                "async.runtime.create",
                "async.runtime.creategroup",
                "async.runtime.store",
                "async.runtime.load",
                "async.coro.id",
                "async.coro.begin",
                "async.coro.free",
                "async.coro.end",
                "async.coro.save",
                "async.coro.suspend"
            ],
            [
                "async.execute",
                "async.await",
                "async.yield",
                "async.runtime.setavailable",
                "async.runtime.seterroro",
                "async.runtime.iserrorg",
                "async.runtime.await",
                "async.runtime.awaitandresumeg",
                "async.runtime.resume",
                "async.runtime.addtogroup",
                "async.runtime.numworkerthreads",
                "async.runtime.addref",
                "async.runtime.dropref",
                "async.runtime.create",
                "async.runtime.creategroup",
                "async.runtime.store",
                "async.runtime.load",
                "async.coro.id",
                "async.coro.begin",
                "async.coro.free",
                "async.coro.end",
                "async.coro.save",
                "async.coro.suspend"
            ]
        ],
        "PASS": [
            "-async-to-async-runtime -async-runtime-ref-counting",
            "-async-to-async-runtime -async-runtime-ref-counting-opt "
        ]
    },
    "complex": {
        "OPS": [
            [
                "complex.pow",
                "complex.sqrt",
                "complex.tanh",
                "complex.cos",
                "complex.sin",
                "complex.conj",
                "complex.log",
                "complex.abs",
                "complex.angle"
            ],
            [
                "complex.abs",
                "complex.add",
                "complex.constant",
                "complex.create",
                "complex.div",
                "complex.im",
                "complex.mul",
                "complex.re",
                "complex.sub"
            ],
            [
                "complex.abs",
                "complex.angle",
                "complex.atan2",
                "complex.add",
                "complex.sub",
                "complex.equal",
                "complex.notequal",
                "complex.conj",
                "complex.cos",
                "complex.div",
                "complex.exp",
                "complex.expm1",
                "complex.log1p",
                "complex.log",
                "complex.mul",
                "complex.neg",
                "complex.sign",
                "complex.sin",
                "complex.sqrt",
                "complex.tan",
                "complex.tanh",
                "complex.pow",
                "complex.rsqrt"
            ]
        ],
        "PASS": [
            "-convert-complex-to-libm",
            "-convert-complex-to-llvm",
            "-convert-complex-to-standard"
        ]
    },
    "cf": {
        "OPS": [
            [
                "cf.br",
                "cf.condbr"
            ],
            [
                "cf.assert",
                "cf.br",
                "cf.condbr",
                "cf.switch"
            ]
        ],
        "PASS": [
            "-convert-cf-to-spirv",
            "-convert-cf-to-llvm"
        ]
    },
    "func": {
        "OPS": [
            [
                "func.call",
                "func.return",
                "func.func"
            ],
            [
                "func.callindirect",
                "func.call",
                "func.constant",
                "func.return",
                "func.func"
            ]
        ],
        "PASS": [
            "-convert-func-to-spirv",
            "-convert-func-to-llvm"
        ]
    },
    "gpu": {
        "OPS": [
            [
                "gpu.launchfunc"
            ],
            [
                "gpu.launchfunc"
            ],
            [
                "gpu.threadid",
                "gpu.blockdim",
                "gpu.blockid",
                "gpu.griddim",
                "gpu.return",
                "gpu.func",
                "gpu.printf"
            ],
            [
                "gpu.alloc",
                "gpu.dealloc",
                "gpu.hostregister",
                "gpu.memcpy",
                "gpu.memset",
                "gpu.setdefaultdevice",
                "gpu.wait",
                "async.yield",
                "gpu.launchfunc",
                "gpu.module"
            ],
            [
                "gpu.threadid",
                "gpu.blockdim",
                "gpu.blockid",
                "gpu.griddim",
                "gpu.laneid",
                "gpu.shuffle",
                "gpu.return",
                "gpu.func",
                "gpu.subgroupmmaloadmatrix",
                "gpu.subgroupmmacompute",
                "gpu.subgroupmmastorematrix",
                "gpu.subgroupmmaconstantmatrix",
                "gpu.subgroupmmaelementwise"
            ],
            [
                "gpu.barrier",
                "gpu.func",
                "gpu.module",
                "gpu.moduleend",
                "gpu.return",
                "gpu.blockid",
                "gpu.griddim",
                "gpu.blockdim",
                "gpu.threadid",
                "gpu.globalid",
                "gpu.subgroupid",
                "gpu.numsubgroups",
                "gpu.subgroupsize",
                "gpu.workgroupsize"
            ],
            [
                "gpu.launchfunc"
            ]
        ],
        "PASS": [
            "-gpu-kernel-outlining -gpu-async-region",
            "-lower-host-to-llvm",
            "-convert-gpu-to-rocdl",
            "-gpu-to-llvm",
            "-convert-gpu-to-nvvm",
            "-convert-gpu-to-spirv",
            "-convert-gpu-launch-to-vulkan-launch"
        ]
    },
    "llvm": {
        "OPS": [
            [
                "llvm.fdiv"
            ]
        ],
        "PASS": [
            "-llvm-optimize-for-nvvm-target"
        ]
    },
    "math": {
        "OPS": [
            [
                "math.atan2",
                "math.expm1",
                "math.tanh",
                "math.cos",
                "math.sin",
                "math.erf",
                "math.round",
                "math.atan",
                "math.tan"
            ],
            [
                "math.abs",
                "math.ceil",
                "math.copysign",
                "math.cos",
                "math.countleadingzeros",
                "math.counttrailingzeros",
                "math.ctpopf",
                "math.exp2",
                "math.expm1",
                "math.exp",
                "math.floor",
                "math.fma",
                "math.log10",
                "math.log1p",
                "math.log2",
                "math.log",
                "math.powf",
                "math.round",
                "math.rsqrt",
                "math.sin",
                "math.sqrt"
            ],
            [
                "math.copysign",
                "math.countleadingzeros",
                "math.log1p",
                "math.expm1",
                "math.powf",
                "math.roundoppattern",
                "math.abs",
                "math.ceil",
                "math.cos",
                "math.exp",
                "math.floor",
                "math.fma",
                "math.log",
                "math.rsqrt",
                "math.sin",
                "math.sqrt",
                "math.tanh",
                "math.erf"
            ]
        ],
        "PASS": [
            "",
            "-convert-math-to-llvm",
            "-convert-math-to-spirv"
        ]
    },
    "memref": {
        "OPS": [
            [
                "memref.alloca",
                "memref.alloc",
                "memref.dealloc",
                "memref.intload",
                "memref.intstore",
                "memref.load",
                "memref.store"
            ],
            [
                "memref.alloca",
                "memref.allocascope",
                "memref.atomicrmw",
                "memref.assumealignment",
                "memref.dim",
                "memref.genericatomicrmw",
                "memref.globalmemref",
                "memref.getglobalmemref",
                "memref.load",
                "memref.cast",
                "memref.copy",
                "memref.reinterpretcast",
                "memref.reshape",
                "memref.prefetch",
                "memref.rank",
                "memref.expandshape",
                "memref.collapseshape",
                "memref.store",
                "memref.subview",
                "memref.transpose",
                "memref.view",
                "memref.alignedalloc",
                "memref.dealloc",
                "memref.alloc"
            ]
        ],
        "PASS": [
            "-convert-memref-to-spirv",
            "-finalize-memref-to-llvm"
        ]
    },
    "nvgpu": {
        "OPS": [
            [
                "nvgpu.mma.sync",
                "nvgpu.ldmatrix",
                "nvgpu.deviceasynccopy",
                "nvgpu.deviceasynccreategroup",
                "nvgpu.deviceasyncwait"
            ]
        ],
        "PASS": [
            "-convert-nvgpu-to-nvvm"
        ]
    },
    "acc": {
        "OPS": [
            [
                "acc.enterdata",
                "acc.exitdata",
                "acc.update"
            ],
            [
                "acc.data",
                "acc.enterdata",
                "acc.exitdata",
                "acc.parallel",
                "acc.update"
            ]
        ],
        "PASS": [
            "-convert-openacc-to-scf",
            "-convert-openacc-to-llvm"
        ]
    },
    "omp": {
        "OPS": [
            [
                "omp.reduction",
                "omp.critical",
                "omp.master",
                "omp.reduction",
                "omp.master",
                "omp.parallel",
                "omp.wsloop",
                "omp.sections",
                "omp.single",
                "omp.atomicread",
                "omp.atomicwrite",
                "omp.flush",
                "omp.threadprivate"
            ]
        ],
        "PASS": [
            "-convert-openmp-to-llvm"
        ]
    },
    "pdl": {
        "OPS": [
            [
                "pdl.apply_native_constraint",
                "pdl.apply_native_rewrite",
                "pdl.attribute",
                "pdl.erase",
                "pdl.operand",
                "pdl.operands",
                "pdl.operation",
                "pdl.pattern",
                "pdl.replace",
                "pdl.result",
                "pdl.results",
                "pdl.rewrite",
                "pdl.type",
                "pdl.types"
            ]
        ],
        "PASS": [
            "-convert-pdl-to-pdl-interp"
        ]
    },
    "scf": {
        "OPS": [
            [
                "scf.parallel"
            ],
            [
                "scf.parallel"
            ],
            [
                "scf.parallel"
            ],
            [
                "scf.parallel"
            ],
            [
                "scf.parallel"
            ],
            [
                "scf.parallel"
            ],
            [
                "scf.for",
                "scf.if",
                "scf.parallel",
                "scf.while",
                "scf.executeregion"
            ]
        ],
        "PASS": [
            "-gpu-map-parallel-loops -convert-parallel-loops-to-gpu",
            "--async-parallel-for=num-workers=-1",
            "--async-parallel-for=async-dispatch=true",
            "--async-parallel-for async-dispatch=false",
            "--async-parallel-for",
            "-convert-scf-to-openmp",
            "-convert-scf-to-cf"
        ]
    },
    "shape": {
        "OPS": [
            [
                "shape.cstreq",
                "shape.broadcast",
                "shape.cstrrequire"
            ],
            [
                "shape.any",
                "shape.add",
                "shape.mul",
                "shape.broadcast",
                "shape.constshape",
                "shape.constsize",
                "shape.isbroadcastable",
                "shape.getextent",
                "shape.rank",
                "shape.reduce",
                "shape.shapeeq",
                "shape.shapeof",
                "shape.splitat",
                "shape.toextenttensor"
            ]
        ],
        "PASS": [
            "-convert-shape-constraints",
            "-convert-shape-to-std"
        ]
    },
    "spv": {
        "OPS": [
            [
                "gpu.launchfunc",
                "spv.module"
            ],
            [
                "spv.IAdd",
                "spv.IMul",
                "spv.ISub",
                "spv.FAdd",
                "spv.FDiv",
                "spv.FMul",
                "spv.FNegate",
                "spv.FRem",
                "spv.FSub",
                "spv.SDiv",
                "spv.SRem",
                "spv.UDiv",
                "spv.UMod",
                "spv.BitCount",
                "spv.BitReverse",
                "spv.BitwiseAnd",
                "spv.BitwiseOr",
                "spv.BitwiseXor",
                "spv.Not",
                "spv.Bitcast",
                "spv.ConvertFToS",
                "spv.ConvertFToU",
                "spv.ConvertSToF",
                "spv.ConvertUToF",
                "spv.FConvert",
                "spv.SConvert",
                "spv.UConvert",
                "spv.IEqual",
                "spv.INotEqual",
                "spv.FOrdEqual",
                "spv.FOrdGreaterThan",
                "spv.FOrdGreaterThanEqual",
                "spv.FOrdLessThanEqual",
                "spv.FOrdLessThan",
                "spv.FOrdNotEqual",
                "spv.FUnordEqual",
                "spv.FUnordGreaterThan",
                "spv.FUnordGreaterThanEqual",
                "spv.FUnordLessThanEqual",
                "spv.FUnordLessThan",
                "spv.FUnordNotEqual",
                "spv.SGreaterThan",
                "spv.SGreaterThanEqual",
                "spv.SLessThanEqual",
                "spv.SLessThan",
                "spv.UGreaterThan",
                "spv.UGreaterThanEqual",
                "spv.ULessThanEqual",
                "spv.ULessThan",
                "spv.Constant",
                "spv.Branch",
                "spv.BranchConditional",
                "spv.FunctionCall",
                "spv.Loop",
                "spv.Selection",
                "spv.Merge",
                "spv.EntryPoint",
                "spv.ExecutionMode",
                "spv.GL.Ceil",
                "spv.GL.Cos",
                "spv.GL.Exp",
                "spv.GL.FAbs",
                "spv.GL.Floor",
                "spv.GL.FMax",
                "spv.GL.FMin",
                "spv.GL.Log",
                "spv.GL.Sin",
                "spv.GL.SMax",
                "spv.GL.SMin",
                "spv.GL.Sqrt",
                "spv.GL.InverseSqrt",
                "spv.GL.Tan",
                "spv.GL.Tanh",
                "spv.LogicalAnd",
                "spv.LogicalOr",
                "spv.LogicalEqual",
                "spv.LogicalNotEqual",
                "spv.LogicalNot",
                "spv.AccessChain",
                "spv.AddressOf",
                "spv.GlobalVariable",
                "spv.Load",
                "spv.Store",
                "spv.Variable",
                "spv.CompositeExtract",
                "spv.CompositeInsert",
                "spv.Select",
                "spv.Undef",
                "spv.VectorShuffle",
                "spv.ShiftRightArithmetic",
                "spv.ShiftRightLogical",
                "spv.ShiftLeftLogical",
                "spv.Return",
                "spv.ReturnValue"
            ]
        ],
        "PASS": [
            "-lower-host-to-llvm",
            "-convert-spirv-to-llvm"
        ]
    },
    "tensor": {
        "OPS": [
            [
                "tensor.pad"
            ],
            [
                "tensor.extract"
            ]
        ],
        "PASS": [
            "-convert-tensor-to-linalg",
            "-convert-tensor-to-spirv"
        ]
    },
    "tosa": {
        "OPS": [
            [
                "tosa.const",
                "tosa.applyscale"
            ],
            [
                "tosa.slice"
            ],
            [
                "tosa.condif",
                "tosa.whileloop"
            ],
            [
                "tosa.conv2d",
                "tosa.depthwiseconv2d",
                "tosa.matmul",
                "tosa.maxpool2d",
                "tosa.avgpool2d",
                "tosa.fullyconnected"
            ],
            [
                "tosa.add",
                "tosa.sub",
                "tosa.mul",
                "tosa.div",
                "tosa.negate",
                "tosa.pow",
                "tosa.reciprocal",
                "tosa.rsqrt",
                "tosa.log",
                "tosa.exp",
                "tosa.abs",
                "tosa.tanh",
                "tosa.bitwiseand",
                "tosa.bitwiseor",
                "tosa.bitwisenot",
                "tosa.bitwisexor",
                "tosa.logicaland",
                "tosa.logicalnot",
                "tosa.logicalor",
                "tosa.logicalxor",
                "tosa.castop",
                "tosa.logicalleftshift",
                "tosa.logicalrightshift",
                "tosa.arithmeticrightshift",
                "tosa.clz",
                "tosa.select",
                "tosa.greater",
                "tosa.greaterequal",
                "tosa.equal",
                "tosa.maximum",
                "tosa.minimum",
                "tosa.ceil",
                "tosa.floor",
                "tosa.clamp",
                "tosa.relun",
                "tosa.sigmoid",
                "tosa.identity",
                "tosa.reduceall",
                "tosa.reduceany",
                "tosa.reducemin",
                "tosa.reducemax",
                "tosa.reducesum",
                "tosa.reduceprod",
                "tosa.argmax",
                "tosa.concat",
                "tosa.gather",
                "tosa.pad",
                "tosa.reshape",
                "tosa.rescale",
                "tosa.resize",
                "tosa.reverse",
                "tosa.table",
                "tosa.tile",
                "tosa.transpose"
            ],
               [
                "tosa.transposeconv2d",
                "tosa.tosa.depthwiseconv2d",
                "tosa.conv2d"
               ]
        ],
        "PASS": [
            "-tosa-optional-decompositions -tosa-to-arith",
            "-tosa-optional-decompositions -tosa-to-tensor",
            "-tosa-optional-decompositions -tosa-to-scf",
            "-tosa-optional-decompositions -pass-pipeline=\"builtin.module(func.func(tosa-to-linalg-named))\"",
            "-tosa-optional-decompositions -pass-pipeline=\"builtin.module(func.func(tosa-to-linalg-named,tosa-to-linalg))\"",
            "-tosa-optional-decompositions"
        ]
    },
    "vector": {
        "OPS": [
            [
                "vector.transferread",
                "vector.transferwrite"
            ],
            [
                "vector.bitcast",
                "vector.broadcast",
                "vector.extractelement",
                "vector.extract",
                "vector.extractstridedslice",
                "vector.fma",
                "vector.insertelement",
                "vector.insert",
                "vector.reduction",
                "vector.insertstridedslice",
                "vector.shuffle",
                "vector.splat"
            ],
            [
                "vector.contract",
                "vector.transpose"
            ],
            [
                "vector.matrixmultiply",
                "vector.flattranspose",
                "vector.fma",
                "vector.reduction",
                "vector.createmask",
                "vector.bitcast",
                "vector.shuffle",
                "vector.extractelement",
                "vector.extract",
                "vector.fmaop1d",
                "vector.insertelement",
                "vector.insert",
                "vector.print",
                "vector.typecast",
                "vector.scale",
                "vector.load",
                "vector.maskedload",
                "vector.store",
                "vector.maskedstore",
                "vector.gather",
                "vector.scatter",
                "vector.expandload",
                "vector.compressstore",
                "vector.splat",
                "vector.splatnd"
            ],
            []
        ],
        "PASS": [
            "-convert-vector-to-scf",
            "",
            "-convert-vector-to-gpu",
            "-convert-vector-to-llvm",
            "-convert-vector-to-rocdl"
        ]
    },
    "linalg": {
        "OPS": [
            [],
            [],
            [],
            []
        ],
        "PASS": [
            "-linalg-bufferize -convert-linalg-to-parallel-loops",
            "-linalg-bufferize -convert-linalg-to-std",
            "-linalg-bufferize -convert-linalg-to-affine-loops",
            "-linalg-bufferize -convert-linalg-to-loops"
        ]
    }
}